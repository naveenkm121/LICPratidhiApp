// Generated by view binder compiler. Do not edit!
package com.licapps.bmmis.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.SwitchCompat;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import com.licapps.bmmis.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemHabitQuestionBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextInputEditText discontinueET;

  @NonNull
  public final TextInputLayout discontinueTIL;

  @NonNull
  public final LinearLayout editFieldsLL;

  @NonNull
  public final SwitchCompat headingSwitch;

  @NonNull
  public final TextInputEditText quantityET;

  @NonNull
  public final TextInputLayout quantityTIL;

  private ItemHabitQuestionBinding(@NonNull LinearLayout rootView,
      @NonNull TextInputEditText discontinueET, @NonNull TextInputLayout discontinueTIL,
      @NonNull LinearLayout editFieldsLL, @NonNull SwitchCompat headingSwitch,
      @NonNull TextInputEditText quantityET, @NonNull TextInputLayout quantityTIL) {
    this.rootView = rootView;
    this.discontinueET = discontinueET;
    this.discontinueTIL = discontinueTIL;
    this.editFieldsLL = editFieldsLL;
    this.headingSwitch = headingSwitch;
    this.quantityET = quantityET;
    this.quantityTIL = quantityTIL;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemHabitQuestionBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemHabitQuestionBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_habit_question, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemHabitQuestionBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.discontinueET;
      TextInputEditText discontinueET = ViewBindings.findChildViewById(rootView, id);
      if (discontinueET == null) {
        break missingId;
      }

      id = R.id.discontinueTIL;
      TextInputLayout discontinueTIL = ViewBindings.findChildViewById(rootView, id);
      if (discontinueTIL == null) {
        break missingId;
      }

      id = R.id.editFieldsLL;
      LinearLayout editFieldsLL = ViewBindings.findChildViewById(rootView, id);
      if (editFieldsLL == null) {
        break missingId;
      }

      id = R.id.headingSwitch;
      SwitchCompat headingSwitch = ViewBindings.findChildViewById(rootView, id);
      if (headingSwitch == null) {
        break missingId;
      }

      id = R.id.quantityET;
      TextInputEditText quantityET = ViewBindings.findChildViewById(rootView, id);
      if (quantityET == null) {
        break missingId;
      }

      id = R.id.quantityTIL;
      TextInputLayout quantityTIL = ViewBindings.findChildViewById(rootView, id);
      if (quantityTIL == null) {
        break missingId;
      }

      return new ItemHabitQuestionBinding((LinearLayout) rootView, discontinueET, discontinueTIL,
          editFieldsLL, headingSwitch, quantityET, quantityTIL);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
