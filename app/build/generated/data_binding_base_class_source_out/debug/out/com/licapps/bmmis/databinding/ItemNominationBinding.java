// Generated by view binder compiler. Do not edit!
package com.licapps.bmmis.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TableLayout;
import android.widget.TableRow;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.licapps.bmmis.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemNominationBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView adddressTV;

  @NonNull
  public final LinearLayout ageLL;

  @NonNull
  public final ImageView deleteIV;

  @NonNull
  public final TableRow emailRow;

  @NonNull
  public final TextView emailTV;

  @NonNull
  public final TextView itemLabelTV;

  @NonNull
  public final TableRow mobileRow;

  @NonNull
  public final TextView mobileTV;

  @NonNull
  public final TextView nameLabelTV;

  @NonNull
  public final TextView nomineeAgeTV;

  @NonNull
  public final LinearLayout nomineeItemLL;

  @NonNull
  public final TextView nominneNameTV;

  @NonNull
  public final TextView pincodeTV;

  @NonNull
  public final LinearLayout planLL;

  @NonNull
  public final TableLayout planTL;

  @NonNull
  public final TextView relationshipLabelTV;

  @NonNull
  public final TextView relationshipTV;

  @NonNull
  public final LinearLayout shareLL;

  @NonNull
  public final TextView shareTV;

  private ItemNominationBinding(@NonNull LinearLayout rootView, @NonNull TextView adddressTV,
      @NonNull LinearLayout ageLL, @NonNull ImageView deleteIV, @NonNull TableRow emailRow,
      @NonNull TextView emailTV, @NonNull TextView itemLabelTV, @NonNull TableRow mobileRow,
      @NonNull TextView mobileTV, @NonNull TextView nameLabelTV, @NonNull TextView nomineeAgeTV,
      @NonNull LinearLayout nomineeItemLL, @NonNull TextView nominneNameTV,
      @NonNull TextView pincodeTV, @NonNull LinearLayout planLL, @NonNull TableLayout planTL,
      @NonNull TextView relationshipLabelTV, @NonNull TextView relationshipTV,
      @NonNull LinearLayout shareLL, @NonNull TextView shareTV) {
    this.rootView = rootView;
    this.adddressTV = adddressTV;
    this.ageLL = ageLL;
    this.deleteIV = deleteIV;
    this.emailRow = emailRow;
    this.emailTV = emailTV;
    this.itemLabelTV = itemLabelTV;
    this.mobileRow = mobileRow;
    this.mobileTV = mobileTV;
    this.nameLabelTV = nameLabelTV;
    this.nomineeAgeTV = nomineeAgeTV;
    this.nomineeItemLL = nomineeItemLL;
    this.nominneNameTV = nominneNameTV;
    this.pincodeTV = pincodeTV;
    this.planLL = planLL;
    this.planTL = planTL;
    this.relationshipLabelTV = relationshipLabelTV;
    this.relationshipTV = relationshipTV;
    this.shareLL = shareLL;
    this.shareTV = shareTV;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemNominationBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemNominationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_nomination, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemNominationBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.adddressTV;
      TextView adddressTV = ViewBindings.findChildViewById(rootView, id);
      if (adddressTV == null) {
        break missingId;
      }

      id = R.id.ageLL;
      LinearLayout ageLL = ViewBindings.findChildViewById(rootView, id);
      if (ageLL == null) {
        break missingId;
      }

      id = R.id.deleteIV;
      ImageView deleteIV = ViewBindings.findChildViewById(rootView, id);
      if (deleteIV == null) {
        break missingId;
      }

      id = R.id.emailRow;
      TableRow emailRow = ViewBindings.findChildViewById(rootView, id);
      if (emailRow == null) {
        break missingId;
      }

      id = R.id.emailTV;
      TextView emailTV = ViewBindings.findChildViewById(rootView, id);
      if (emailTV == null) {
        break missingId;
      }

      id = R.id.itemLabelTV;
      TextView itemLabelTV = ViewBindings.findChildViewById(rootView, id);
      if (itemLabelTV == null) {
        break missingId;
      }

      id = R.id.mobileRow;
      TableRow mobileRow = ViewBindings.findChildViewById(rootView, id);
      if (mobileRow == null) {
        break missingId;
      }

      id = R.id.mobileTV;
      TextView mobileTV = ViewBindings.findChildViewById(rootView, id);
      if (mobileTV == null) {
        break missingId;
      }

      id = R.id.nameLabelTV;
      TextView nameLabelTV = ViewBindings.findChildViewById(rootView, id);
      if (nameLabelTV == null) {
        break missingId;
      }

      id = R.id.nomineeAgeTV;
      TextView nomineeAgeTV = ViewBindings.findChildViewById(rootView, id);
      if (nomineeAgeTV == null) {
        break missingId;
      }

      LinearLayout nomineeItemLL = (LinearLayout) rootView;

      id = R.id.nominneNameTV;
      TextView nominneNameTV = ViewBindings.findChildViewById(rootView, id);
      if (nominneNameTV == null) {
        break missingId;
      }

      id = R.id.pincodeTV;
      TextView pincodeTV = ViewBindings.findChildViewById(rootView, id);
      if (pincodeTV == null) {
        break missingId;
      }

      id = R.id.planLL;
      LinearLayout planLL = ViewBindings.findChildViewById(rootView, id);
      if (planLL == null) {
        break missingId;
      }

      id = R.id.planTL;
      TableLayout planTL = ViewBindings.findChildViewById(rootView, id);
      if (planTL == null) {
        break missingId;
      }

      id = R.id.relationshipLabelTV;
      TextView relationshipLabelTV = ViewBindings.findChildViewById(rootView, id);
      if (relationshipLabelTV == null) {
        break missingId;
      }

      id = R.id.relationshipTV;
      TextView relationshipTV = ViewBindings.findChildViewById(rootView, id);
      if (relationshipTV == null) {
        break missingId;
      }

      id = R.id.shareLL;
      LinearLayout shareLL = ViewBindings.findChildViewById(rootView, id);
      if (shareLL == null) {
        break missingId;
      }

      id = R.id.shareTV;
      TextView shareTV = ViewBindings.findChildViewById(rootView, id);
      if (shareTV == null) {
        break missingId;
      }

      return new ItemNominationBinding((LinearLayout) rootView, adddressTV, ageLL, deleteIV,
          emailRow, emailTV, itemLabelTV, mobileRow, mobileTV, nameLabelTV, nomineeAgeTV,
          nomineeItemLL, nominneNameTV, pincodeTV, planLL, planTL, relationshipLabelTV,
          relationshipTV, shareLL, shareTV);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
