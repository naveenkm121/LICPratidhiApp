// Generated by Dagger (https://dagger.dev).
package com.licapps.bmmis;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.licapps.bmmis.data.api.AnandaServices;
import com.licapps.bmmis.data.api.BMMisRemoteDataSource;
import com.licapps.bmmis.data.localdb.AppDatabase;
import com.licapps.bmmis.data.localdb.PlanDao;
import com.licapps.bmmis.data.repository.AnandaRepository;
import com.licapps.bmmis.di.AppModule;
import com.licapps.bmmis.di.AppModule_ProvideAnandaOkHttpClientFactory;
import com.licapps.bmmis.di.AppModule_ProvideAnandaRepositoryFactory;
import com.licapps.bmmis.di.AppModule_ProvideAnandaRetrofitFactory;
import com.licapps.bmmis.di.AppModule_ProvideAnandaServicesFactory;
import com.licapps.bmmis.di.AppModule_ProvideDatabaseFactory;
import com.licapps.bmmis.di.AppModule_ProvideGsonFactory;
import com.licapps.bmmis.di.AppModule_ProvidePlanDaoFactory;
import com.licapps.bmmis.ui.activities.LaunchActivity;
import com.licapps.bmmis.ui.activities.NewHomeActivity;
import com.licapps.bmmis.ui.fragments.ActivisationFragment;
import com.licapps.bmmis.ui.fragments.AnadaEMHRFragment;
import com.licapps.bmmis.ui.fragments.AnandaFragment;
import com.licapps.bmmis.ui.fragments.BOCFragment;
import com.licapps.bmmis.ui.fragments.ClaimsFragment;
import com.licapps.bmmis.ui.fragments.ContactUsFragment;
import com.licapps.bmmis.ui.fragments.EMHRFragment;
import com.licapps.bmmis.ui.fragments.HomeFragment;
import com.licapps.bmmis.ui.fragments.InactiveResListFragment;
import com.licapps.bmmis.ui.fragments.InactiveResourcesFragment;
import com.licapps.bmmis.ui.fragments.LoginFragment;
import com.licapps.bmmis.ui.fragments.MABDetailsFragment;
import com.licapps.bmmis.ui.fragments.MABFragment;
import com.licapps.bmmis.ui.fragments.NBChannelWiseFragment;
import com.licapps.bmmis.ui.fragments.NBForDayFragment;
import com.licapps.bmmis.ui.fragments.NBPerfUptoMonthFragment;
import com.licapps.bmmis.ui.fragments.NBPerformanceFragment;
import com.licapps.bmmis.ui.fragments.NUAFragment;
import com.licapps.bmmis.ui.fragments.NewHomeFragment;
import com.licapps.bmmis.ui.fragments.PeristenceFragment;
import com.licapps.bmmis.ui.fragments.PlanPerfFragment;
import com.licapps.bmmis.ui.fragments.ProspectiveNewFragment;
import com.licapps.bmmis.ui.fragments.ProspectivesFragment;
import com.licapps.bmmis.ui.fragments.ResourceBuildingFragment;
import com.licapps.bmmis.ui.fragments.ResourceFragment;
import com.licapps.bmmis.ui.fragments.SplashFragment;
import com.licapps.bmmis.ui.fragments.TopPerformersFragment;
import com.licapps.bmmis.ui.fragments.WebViewFragment;
import com.licapps.bmmis.ui.fragments.WishesFragment;
import com.licapps.bmmis.ui.viewmodels.ActivisationViewModel;
import com.licapps.bmmis.ui.viewmodels.ActivisationViewModel_HiltModules_KeyModule_ProvideFactory;
import com.licapps.bmmis.ui.viewmodels.AnandaViewModel;
import com.licapps.bmmis.ui.viewmodels.AnandaViewModel_HiltModules_KeyModule_ProvideFactory;
import com.licapps.bmmis.ui.viewmodels.AvailResourceViewModel;
import com.licapps.bmmis.ui.viewmodels.AvailResourceViewModel_HiltModules_KeyModule_ProvideFactory;
import com.licapps.bmmis.ui.viewmodels.BOCViewModel;
import com.licapps.bmmis.ui.viewmodels.BOCViewModel_HiltModules_KeyModule_ProvideFactory;
import com.licapps.bmmis.ui.viewmodels.CasesViewModel;
import com.licapps.bmmis.ui.viewmodels.CasesViewModel_HiltModules_KeyModule_ProvideFactory;
import com.licapps.bmmis.ui.viewmodels.ClaimsViewModel;
import com.licapps.bmmis.ui.viewmodels.ClaimsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.licapps.bmmis.ui.viewmodels.EMHRViewModel;
import com.licapps.bmmis.ui.viewmodels.EMHRViewModel_HiltModules_KeyModule_ProvideFactory;
import com.licapps.bmmis.ui.viewmodels.InactiveResListViewModel;
import com.licapps.bmmis.ui.viewmodels.InactiveResListViewModel_HiltModules_KeyModule_ProvideFactory;
import com.licapps.bmmis.ui.viewmodels.InactiveViewModel;
import com.licapps.bmmis.ui.viewmodels.InactiveViewModel_HiltModules_KeyModule_ProvideFactory;
import com.licapps.bmmis.ui.viewmodels.LoginViewModel;
import com.licapps.bmmis.ui.viewmodels.LoginViewModel_HiltModules_KeyModule_ProvideFactory;
import com.licapps.bmmis.ui.viewmodels.MABViewModel;
import com.licapps.bmmis.ui.viewmodels.MABViewModel_HiltModules_KeyModule_ProvideFactory;
import com.licapps.bmmis.ui.viewmodels.NBChannelWiseViewModel;
import com.licapps.bmmis.ui.viewmodels.NBChannelWiseViewModel_HiltModules_KeyModule_ProvideFactory;
import com.licapps.bmmis.ui.viewmodels.NBForDayViewModel;
import com.licapps.bmmis.ui.viewmodels.NBForDayViewModel_HiltModules_KeyModule_ProvideFactory;
import com.licapps.bmmis.ui.viewmodels.NBUptoDayViewModel;
import com.licapps.bmmis.ui.viewmodels.NBUptoDayViewModel_HiltModules_KeyModule_ProvideFactory;
import com.licapps.bmmis.ui.viewmodels.NBUptoMonthhViewModel;
import com.licapps.bmmis.ui.viewmodels.NBUptoMonthhViewModel_HiltModules_KeyModule_ProvideFactory;
import com.licapps.bmmis.ui.viewmodels.NUAViewmodel;
import com.licapps.bmmis.ui.viewmodels.NUAViewmodel_HiltModules_KeyModule_ProvideFactory;
import com.licapps.bmmis.ui.viewmodels.PersistenceViewModel;
import com.licapps.bmmis.ui.viewmodels.PersistenceViewModel_HiltModules_KeyModule_ProvideFactory;
import com.licapps.bmmis.ui.viewmodels.PlanPerfViewModel;
import com.licapps.bmmis.ui.viewmodels.PlanPerfViewModel_HiltModules_KeyModule_ProvideFactory;
import com.licapps.bmmis.ui.viewmodels.ResBuildingViewModel;
import com.licapps.bmmis.ui.viewmodels.ResBuildingViewModel_HiltModules_KeyModule_ProvideFactory;
import com.licapps.bmmis.ui.viewmodels.SplashViewModel;
import com.licapps.bmmis.ui.viewmodels.SplashViewModel_HiltModules_KeyModule_ProvideFactory;
import com.licapps.bmmis.ui.viewmodels.TopPerformersViewModel;
import com.licapps.bmmis.ui.viewmodels.TopPerformersViewModel_HiltModules_KeyModule_ProvideFactory;
import com.licapps.bmmis.ui.viewmodels.WishesViewModel;
import com.licapps.bmmis.ui.viewmodels.WishesViewModel_HiltModules_KeyModule_ProvideFactory;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.ViewModelLifecycle;
import dagger.hilt.android.flags.HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DaggerMainApplication_HiltComponents_SingletonC {
  private DaggerMainApplication_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder appModule(AppModule appModule) {
      Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule(
        HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule) {
      Preconditions.checkNotNull(hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule);
      return this;
    }

    public MainApplication_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new SingletonCImpl(applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements MainApplication_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public MainApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonCImpl);
    }
  }

  private static final class ActivityCBuilder implements MainApplication_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public MainApplication_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements MainApplication_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public MainApplication_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements MainApplication_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MainApplication_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements MainApplication_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MainApplication_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements MainApplication_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelLifecycle viewModelLifecycle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public ViewModelCBuilder viewModelLifecycle(ViewModelLifecycle viewModelLifecycle) {
      this.viewModelLifecycle = Preconditions.checkNotNull(viewModelLifecycle);
      return this;
    }

    @Override
    public MainApplication_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      Preconditions.checkBuilderRequirement(viewModelLifecycle, ViewModelLifecycle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, savedStateHandle, viewModelLifecycle);
    }
  }

  private static final class ServiceCBuilder implements MainApplication_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public MainApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends MainApplication_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends MainApplication_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public void injectActivisationFragment(ActivisationFragment activisationFragment) {
    }

    @Override
    public void injectAnadaEMHRFragment(AnadaEMHRFragment anadaEMHRFragment) {
    }

    @Override
    public void injectAnandaFragment(AnandaFragment anandaFragment) {
    }

    @Override
    public void injectBOCFragment(BOCFragment bOCFragment) {
    }

    @Override
    public void injectClaimsFragment(ClaimsFragment claimsFragment) {
    }

    @Override
    public void injectContactUsFragment(ContactUsFragment contactUsFragment) {
    }

    @Override
    public void injectEMHRFragment(EMHRFragment eMHRFragment) {
    }

    @Override
    public void injectHomeFragment(HomeFragment homeFragment) {
    }

    @Override
    public void injectInactiveResListFragment(InactiveResListFragment inactiveResListFragment) {
    }

    @Override
    public void injectInactiveResourcesFragment(
        InactiveResourcesFragment inactiveResourcesFragment) {
    }

    @Override
    public void injectLoginFragment(LoginFragment loginFragment) {
    }

    @Override
    public void injectMABDetailsFragment(MABDetailsFragment mABDetailsFragment) {
    }

    @Override
    public void injectMABFragment(MABFragment mABFragment) {
    }

    @Override
    public void injectNBChannelWiseFragment(NBChannelWiseFragment nBChannelWiseFragment) {
    }

    @Override
    public void injectNBForDayFragment(NBForDayFragment nBForDayFragment) {
    }

    @Override
    public void injectNBPerfUptoMonthFragment(NBPerfUptoMonthFragment nBPerfUptoMonthFragment) {
    }

    @Override
    public void injectNBPerformanceFragment(NBPerformanceFragment nBPerformanceFragment) {
    }

    @Override
    public void injectNUAFragment(NUAFragment nUAFragment) {
    }

    @Override
    public void injectNewHomeFragment(NewHomeFragment newHomeFragment) {
    }

    @Override
    public void injectPeristenceFragment(PeristenceFragment peristenceFragment) {
    }

    @Override
    public void injectPlanPerfFragment(PlanPerfFragment planPerfFragment) {
    }

    @Override
    public void injectProspectiveNewFragment(ProspectiveNewFragment prospectiveNewFragment) {
    }

    @Override
    public void injectProspectivesFragment(ProspectivesFragment prospectivesFragment) {
    }

    @Override
    public void injectResourceBuildingFragment(ResourceBuildingFragment resourceBuildingFragment) {
    }

    @Override
    public void injectResourceFragment(ResourceFragment resourceFragment) {
    }

    @Override
    public void injectSplashFragment(SplashFragment splashFragment) {
    }

    @Override
    public void injectTopPerformersFragment(TopPerformersFragment topPerformersFragment) {
    }

    @Override
    public void injectWebViewFragment(WebViewFragment webViewFragment) {
    }

    @Override
    public void injectWishesFragment(WishesFragment wishesFragment) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends MainApplication_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends MainApplication_HiltComponents.ActivityC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectLaunchActivity(LaunchActivity launchActivity) {
    }

    @Override
    public void injectNewHomeActivity(NewHomeActivity newHomeActivity) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return SetBuilder.<String>newSetBuilder(22).add(ActivisationViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(AnandaViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(AvailResourceViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(BOCViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(CasesViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ClaimsViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(EMHRViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(InactiveResListViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(InactiveViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(LoginViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(MABViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(NBChannelWiseViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(NBForDayViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(NBUptoDayViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(NBUptoMonthhViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(NUAViewmodel_HiltModules_KeyModule_ProvideFactory.provide()).add(PersistenceViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(PlanPerfViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ResBuildingViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SplashViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(TopPerformersViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(WishesViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }
  }

  private static final class ViewModelCImpl extends MainApplication_HiltComponents.ViewModelC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<ActivisationViewModel> activisationViewModelProvider;

    private Provider<AnandaViewModel> anandaViewModelProvider;

    private Provider<AvailResourceViewModel> availResourceViewModelProvider;

    private Provider<BOCViewModel> bOCViewModelProvider;

    private Provider<CasesViewModel> casesViewModelProvider;

    private Provider<ClaimsViewModel> claimsViewModelProvider;

    private Provider<EMHRViewModel> eMHRViewModelProvider;

    private Provider<InactiveResListViewModel> inactiveResListViewModelProvider;

    private Provider<InactiveViewModel> inactiveViewModelProvider;

    private Provider<LoginViewModel> loginViewModelProvider;

    private Provider<MABViewModel> mABViewModelProvider;

    private Provider<NBChannelWiseViewModel> nBChannelWiseViewModelProvider;

    private Provider<NBForDayViewModel> nBForDayViewModelProvider;

    private Provider<NBUptoDayViewModel> nBUptoDayViewModelProvider;

    private Provider<NBUptoMonthhViewModel> nBUptoMonthhViewModelProvider;

    private Provider<NUAViewmodel> nUAViewmodelProvider;

    private Provider<PersistenceViewModel> persistenceViewModelProvider;

    private Provider<PlanPerfViewModel> planPerfViewModelProvider;

    private Provider<ResBuildingViewModel> resBuildingViewModelProvider;

    private Provider<SplashViewModel> splashViewModelProvider;

    private Provider<TopPerformersViewModel> topPerformersViewModelProvider;

    private Provider<WishesViewModel> wishesViewModelProvider;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam,
        ViewModelLifecycle viewModelLifecycleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam, viewModelLifecycleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam,
        final ViewModelLifecycle viewModelLifecycleParam) {
      this.activisationViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 0);
      this.anandaViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 1);
      this.availResourceViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 2);
      this.bOCViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 3);
      this.casesViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 4);
      this.claimsViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 5);
      this.eMHRViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 6);
      this.inactiveResListViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 7);
      this.inactiveViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 8);
      this.loginViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 9);
      this.mABViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 10);
      this.nBChannelWiseViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 11);
      this.nBForDayViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 12);
      this.nBUptoDayViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 13);
      this.nBUptoMonthhViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 14);
      this.nUAViewmodelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 15);
      this.persistenceViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 16);
      this.planPerfViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 17);
      this.resBuildingViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 18);
      this.splashViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 19);
      this.topPerformersViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 20);
      this.wishesViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 21);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(22).put("com.licapps.bmmis.ui.viewmodels.ActivisationViewModel", ((Provider) activisationViewModelProvider)).put("com.licapps.bmmis.ui.viewmodels.AnandaViewModel", ((Provider) anandaViewModelProvider)).put("com.licapps.bmmis.ui.viewmodels.AvailResourceViewModel", ((Provider) availResourceViewModelProvider)).put("com.licapps.bmmis.ui.viewmodels.BOCViewModel", ((Provider) bOCViewModelProvider)).put("com.licapps.bmmis.ui.viewmodels.CasesViewModel", ((Provider) casesViewModelProvider)).put("com.licapps.bmmis.ui.viewmodels.ClaimsViewModel", ((Provider) claimsViewModelProvider)).put("com.licapps.bmmis.ui.viewmodels.EMHRViewModel", ((Provider) eMHRViewModelProvider)).put("com.licapps.bmmis.ui.viewmodels.InactiveResListViewModel", ((Provider) inactiveResListViewModelProvider)).put("com.licapps.bmmis.ui.viewmodels.InactiveViewModel", ((Provider) inactiveViewModelProvider)).put("com.licapps.bmmis.ui.viewmodels.LoginViewModel", ((Provider) loginViewModelProvider)).put("com.licapps.bmmis.ui.viewmodels.MABViewModel", ((Provider) mABViewModelProvider)).put("com.licapps.bmmis.ui.viewmodels.NBChannelWiseViewModel", ((Provider) nBChannelWiseViewModelProvider)).put("com.licapps.bmmis.ui.viewmodels.NBForDayViewModel", ((Provider) nBForDayViewModelProvider)).put("com.licapps.bmmis.ui.viewmodels.NBUptoDayViewModel", ((Provider) nBUptoDayViewModelProvider)).put("com.licapps.bmmis.ui.viewmodels.NBUptoMonthhViewModel", ((Provider) nBUptoMonthhViewModelProvider)).put("com.licapps.bmmis.ui.viewmodels.NUAViewmodel", ((Provider) nUAViewmodelProvider)).put("com.licapps.bmmis.ui.viewmodels.PersistenceViewModel", ((Provider) persistenceViewModelProvider)).put("com.licapps.bmmis.ui.viewmodels.PlanPerfViewModel", ((Provider) planPerfViewModelProvider)).put("com.licapps.bmmis.ui.viewmodels.ResBuildingViewModel", ((Provider) resBuildingViewModelProvider)).put("com.licapps.bmmis.ui.viewmodels.SplashViewModel", ((Provider) splashViewModelProvider)).put("com.licapps.bmmis.ui.viewmodels.TopPerformersViewModel", ((Provider) topPerformersViewModelProvider)).put("com.licapps.bmmis.ui.viewmodels.WishesViewModel", ((Provider) wishesViewModelProvider)).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ViewModelCImpl viewModelCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.licapps.bmmis.ui.viewmodels.ActivisationViewModel 
          return (T) new ActivisationViewModel(singletonCImpl.provideAnandaRepositoryProvider.get());

          case 1: // com.licapps.bmmis.ui.viewmodels.AnandaViewModel 
          return (T) new AnandaViewModel(singletonCImpl.provideAnandaRepositoryProvider.get());

          case 2: // com.licapps.bmmis.ui.viewmodels.AvailResourceViewModel 
          return (T) new AvailResourceViewModel(singletonCImpl.provideAnandaRepositoryProvider.get());

          case 3: // com.licapps.bmmis.ui.viewmodels.BOCViewModel 
          return (T) new BOCViewModel(singletonCImpl.provideAnandaRepositoryProvider.get());

          case 4: // com.licapps.bmmis.ui.viewmodels.CasesViewModel 
          return (T) new CasesViewModel(singletonCImpl.provideAnandaRepositoryProvider.get());

          case 5: // com.licapps.bmmis.ui.viewmodels.ClaimsViewModel 
          return (T) new ClaimsViewModel(singletonCImpl.provideAnandaRepositoryProvider.get());

          case 6: // com.licapps.bmmis.ui.viewmodels.EMHRViewModel 
          return (T) new EMHRViewModel(singletonCImpl.provideAnandaRepositoryProvider.get());

          case 7: // com.licapps.bmmis.ui.viewmodels.InactiveResListViewModel 
          return (T) new InactiveResListViewModel(singletonCImpl.provideAnandaRepositoryProvider.get());

          case 8: // com.licapps.bmmis.ui.viewmodels.InactiveViewModel 
          return (T) new InactiveViewModel(singletonCImpl.provideAnandaRepositoryProvider.get());

          case 9: // com.licapps.bmmis.ui.viewmodels.LoginViewModel 
          return (T) new LoginViewModel(singletonCImpl.provideAnandaRepositoryProvider.get());

          case 10: // com.licapps.bmmis.ui.viewmodels.MABViewModel 
          return (T) new MABViewModel(singletonCImpl.provideAnandaRepositoryProvider.get());

          case 11: // com.licapps.bmmis.ui.viewmodels.NBChannelWiseViewModel 
          return (T) new NBChannelWiseViewModel(singletonCImpl.provideAnandaRepositoryProvider.get());

          case 12: // com.licapps.bmmis.ui.viewmodels.NBForDayViewModel 
          return (T) new NBForDayViewModel(singletonCImpl.provideAnandaRepositoryProvider.get());

          case 13: // com.licapps.bmmis.ui.viewmodels.NBUptoDayViewModel 
          return (T) new NBUptoDayViewModel(singletonCImpl.provideAnandaRepositoryProvider.get());

          case 14: // com.licapps.bmmis.ui.viewmodels.NBUptoMonthhViewModel 
          return (T) new NBUptoMonthhViewModel(singletonCImpl.provideAnandaRepositoryProvider.get());

          case 15: // com.licapps.bmmis.ui.viewmodels.NUAViewmodel 
          return (T) new NUAViewmodel(singletonCImpl.provideAnandaRepositoryProvider.get());

          case 16: // com.licapps.bmmis.ui.viewmodels.PersistenceViewModel 
          return (T) new PersistenceViewModel(singletonCImpl.provideAnandaRepositoryProvider.get());

          case 17: // com.licapps.bmmis.ui.viewmodels.PlanPerfViewModel 
          return (T) new PlanPerfViewModel(singletonCImpl.provideAnandaRepositoryProvider.get());

          case 18: // com.licapps.bmmis.ui.viewmodels.ResBuildingViewModel 
          return (T) new ResBuildingViewModel(singletonCImpl.provideAnandaRepositoryProvider.get());

          case 19: // com.licapps.bmmis.ui.viewmodels.SplashViewModel 
          return (T) new SplashViewModel(singletonCImpl.provideAnandaRepositoryProvider.get());

          case 20: // com.licapps.bmmis.ui.viewmodels.TopPerformersViewModel 
          return (T) new TopPerformersViewModel(singletonCImpl.provideAnandaRepositoryProvider.get());

          case 21: // com.licapps.bmmis.ui.viewmodels.WishesViewModel 
          return (T) new WishesViewModel(singletonCImpl.provideAnandaRepositoryProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends MainApplication_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    private Provider<ActivityRetainedLifecycle> provideActivityRetainedLifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.provideActivityRetainedLifecycleProvider = DoubleCheck.provider(new SwitchingProvider<ActivityRetainedLifecycle>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return provideActivityRetainedLifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.ActivityRetainedLifecycle 
          return (T) ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory.provideActivityRetainedLifecycle();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends MainApplication_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }
  }

  private static final class SingletonCImpl extends MainApplication_HiltComponents.SingletonC {
    private final ApplicationContextModule applicationContextModule;

    private final SingletonCImpl singletonCImpl = this;

    private Provider<AppDatabase> provideDatabaseProvider;

    private Provider<PlanDao> providePlanDaoProvider;

    private Provider<AnandaRepository> provideAnandaRepositoryProvider;

    private SingletonCImpl(ApplicationContextModule applicationContextModuleParam) {
      this.applicationContextModule = applicationContextModuleParam;
      initialize(applicationContextModuleParam);

    }

    private OkHttpClient namedOkHttpClient() {
      return AppModule_ProvideAnandaOkHttpClientFactory.provideAnandaOkHttpClient(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
    }

    private Retrofit namedRetrofit() {
      return AppModule_ProvideAnandaRetrofitFactory.provideAnandaRetrofit(AppModule_ProvideGsonFactory.provideGson(), namedOkHttpClient());
    }

    private AnandaServices anandaServices() {
      return AppModule_ProvideAnandaServicesFactory.provideAnandaServices(namedRetrofit());
    }

    private BMMisRemoteDataSource bMMisRemoteDataSource() {
      return new BMMisRemoteDataSource(anandaServices());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ApplicationContextModule applicationContextModuleParam) {
      this.provideDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<AppDatabase>(singletonCImpl, 2));
      this.providePlanDaoProvider = DoubleCheck.provider(new SwitchingProvider<PlanDao>(singletonCImpl, 1));
      this.provideAnandaRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<AnandaRepository>(singletonCImpl, 0));
    }

    @Override
    public void injectMainApplication(MainApplication mainApplication) {
    }

    @Override
    public Set<Boolean> getDisableFragmentGetContextFix() {
      return Collections.<Boolean>emptySet();
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.licapps.bmmis.data.repository.AnandaRepository 
          return (T) AppModule_ProvideAnandaRepositoryFactory.provideAnandaRepository(singletonCImpl.bMMisRemoteDataSource(), singletonCImpl.providePlanDaoProvider.get());

          case 1: // com.licapps.bmmis.data.localdb.PlanDao 
          return (T) AppModule_ProvidePlanDaoFactory.providePlanDao(singletonCImpl.provideDatabaseProvider.get());

          case 2: // com.licapps.bmmis.data.localdb.AppDatabase 
          return (T) AppModule_ProvideDatabaseFactory.provideDatabase(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
